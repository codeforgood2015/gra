<!DOCTYPE html>
<html>
  <head>
	<meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>Green My Restaurant</title>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <link href="/bootstrap-3.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
	<link rel='stylesheet' href='/stylesheets/desktop.css' media="only screen and (min-width: 721px)"/>
	<link href="/stylesheets/mobile.css" rel="stylesheet" type="text/css" media="only screen and (max-width: 720px)" />
	<link rel = "stylesheet" href = "../owl-carousel/owl.carousel.css">
	<link rel = "stylesheet" href = "../owl-carousel/owl.theme.css">
	<script src = "../owl-carousel/owl.carousel.js"></script>
  <!-- <script src="/DemoRestaurant.js"></script> -->

    <script src = "../babylon.js"></script>

    <!-- Custom styles for this template -->
    <link href="/stylesheets/base.css" rel="stylesheet">
  </head>
  <body ng-app="guiApp">
	<!-- <div data-ng-include data-src="'/angularviews/navbar.html'"></div> -->
    <!-- <div data-ng-include data-src="'/angularviews/login.html'"></div> -->
	<div class="container-fluid">

    <div id="buttonCarousel" class="owl-carousel sliderButtons"  aria-label = "...">
      <div class = "sliderButton">
        <a href="/gui/#/Disposables"><img src="../carouselImages/rsz_disposables.jpg">
          <h4>Disposables</h4></a>
      </div>
      <div class = "sliderButton">
        <a href="/gui/#/Energy"><img src="../carouselImages/rsz_energy.jpg">
          <h4>Energy</h4></a>
      </div>
      <div class = "sliderButton">
        <a href="/gui/#/Food"><img src="../carouselImages/rsz_food.png">
          <h4>Food</h4></a>
      </div>

      <div class="sliderButton">
        <a href="/gui/#/Sustainable Furnishings & Building Materials"><img src="../carouselImages/rsz_furnishings.png">
          <h4>Furnishings</h4></a>
      </div>

      <div class="sliderButton">
        <a href="/gui/#/Pollution & Chemical Reduction"><img src="../carouselImages/rsz_pollution.jpg">
          <h4>Pollution</h4></a>
      </div>

      <div class="sliderButton">
        <a href="/gui/#/Waste"><img src="../carouselImages/rsz_waste.jpg">
          <h4>Waste</h4></a>
      </div>

      <div class="sliderButton">
        <a href="/gui/#/Water"><img src="../carouselImages/rsz_water.jpg">
          <h4>Water</h4></a>
      </div>
    </div>
                
    <div class="col-md-8 col-sm-8" id="guiDiv">
      <div id="centerColumn">
				<div class="row">
					<div id="graphicsDiv" class = "btn-group" role = "group" aria-label = "...">
            <div id = "buttons" class = "btn-group-vertical" role = "group" aria-label="...">
              <div id = "settings" class="btn-group" role="group">
                <button type="button" class="btn btn-default dropdown-toggle button graphicsButton" data-toggle="dropdown" aria-expanded="false">
                  <span class="glyphicon glyphicon-cog"></span>
                  Help
                  <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                  <li><a href="#" data-toggle="modal" data-target="#tutorialModal">View Tutorial</a></li>
                </ul>
            </div>
							<button id = "diningRoomButton" type = "button" class = "btn btn-default button graphicsButton">Dining Room</button>

							<button id = "restroomButton" type = "button" class = "btn btn-default button graphicsButton">Restroom</button>

              <button id = "kitchenButton" type = "button" class = "btn btn-default button graphicsButton">Kitchen</button>

              <button id = "storageButton" type = "button" class = "btn btn-default button graphicsButton">Storage</button>

              <button id = "utilityButton" type = "button" class = "btn btn-default button graphicsButton">Utility</button>

              <button id = "officeButton" type = "button" class = "btn btn-default button graphicsButton">Office</button>

              <button id = "exteriorButton" type = "button" class = "btn btn-default button graphicsButton">Exterior</button>

              <button id = "entranceButton" type = "button" class = "btn btn-default button graphicsButton">Entrance</button>

              <!-- <button id = "testMovementButton" type = "button" class = "btn btn-default button graphicsButton">Test</button> -->
            </div>
            <script>
               $(document).ready(function(){
                      $("#buttonCarousel").owlCarousel({
                            items: 7,
                            itemsDesktop : [1000,7], //5 items between 1000px and 901px
                            itemsDesktopSmall : [900,5], // betweem 900px and 601px
                            itemsTablet: [600,3], //2 items between 600 and 0
                            itemsTabletSmall: [400, 2],
                            itemsMobile : [200, 1] // itemsMobile disabled - inherit from itemsTablet
                        })

                      $(document).tooltip();
                   });

            </script>
						<canvas id="renderCanvas"></canvas>
					</div>
				</div>
            </div>
        </div>
		<div class="col-md-4 col-sm-8" style="padding: 1em; position: relative;"> 
			<div class="progress progress-category">
				<div class="progress-bar progress-bar-danger" id="DisposBar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="10" style="width: 0%"></div>
				<div class="progress-text" id="DisposBarAfter">
					<a href="/gui/#/Disposables">Disposables</a>
				</div>
			</div>
			<div class="progress progress-category">
				<div class="progress-bar progress-bar-danger" id="EnergyBar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="10" style="width: 0%"></div>
				<div class="progress-text" id="EnergyBarAfter">
					<a href="/gui/#/Energy">Energy</a>
				</div>
			</div>
			<div class="progress progress-category">
				<div class="progress-bar progress-bar-danger" id="FoodBar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="10" style="width: 0%"></div>
				<div class="progress-text" id="FoodBarAfter">
					<a href="/gui/#/Food">Food</a>
				</div>
			</div>
			<div class="progress progress-category">
				<div class="progress-bar progress-bar-danger" id="SustaiBar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="10" style="width: 0%"></div>
				<div class="progress-text" id="SustaiBarAfter">
					<a href="/gui/#/Sustainable Furnishings & Building Materials">Sustainable Furnishings and Building Mat.</a>
				</div>
			</div>
			<div class="progress progress-category">
				<div class="progress-bar progress-bar-danger" id="PollutBar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="10" style="width: 0%"></div>
				<div class="progress-text" id="PollutBarAfter">
					<a href="/gui/#/Pollution & Chemical Reduction">Poll. & Chem .Reduction</a>
				</div>
			</div>
			<div class="progress progress-category">
				<div class="progress-bar progress-bar-danger" id="WasteBar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="10" style="width: 0%"></div>
				<div class="progress-text" id="WasteBarAfter">
					<a href="/gui/#/Waste">Waste</a>
				</div>
			</div>
			<div class="progress progress-category">
			<div class="progress-bar progress-bar-danger" id="WaterBar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="10" style="width: 0%"></div>
				<div class="progress-text" id="WaterBarAfter">
					<a href="/gui/#/Water">Water</a>
				</div>
			</div>
		</div>
		<div class="col-md-8 col-sm-8">
			<div ng-view></div>
		</div>
    </div>

	<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.min.js"></script>
	<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular-route.min.js"></script>
	<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular-animate.min.js"></script>
	<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular-cookies.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
	<script src="http://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-0.4.0.js"></script>
	<script src="/javascripts/angularApp/guiApp.js"></script>
	<script src="/javascripts/angularApp/guiController.js"></script>
	<script src="/javascripts/angularApp/categoryController.js"></script>
	<script src="/javascripts/angularApp/itemController.js"></script>
	<script>
        if (BABYLON.Engine.isSupported()) {
            var canvas = document.getElementById("renderCanvas");
            var engine = new BABYLON.Engine(canvas, true);
            myScene = new BABYLON.Scene(engine);
            BABYLON.SceneLoader.Load("", "../babylon/TestRestaurant.babylon", engine, function (newScene) {
                // Wait for textures and shaders to be ready
                // console.log(newScene);
                newScene.executeWhenReady(function () {
                    // Attach camera to canvas inputs
                  // newScene.activeCamera = new BABYLON.TouchCamera("touchCamera", new BABYLON.Vector3(-7, 8, -42), newScene);

                  newScene.activeCamera.attachControl(canvas);
                  myScene = newScene;

                  var skybox = BABYLON.Mesh.CreateBox("skyBox", 1000.0, newScene);
                  var skyboxMaterial = new BABYLON.StandardMaterial("skyBox", newScene);
                  skyboxMaterial.backFaceCulling = false;
                  skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture("../babylon/cubemap/cubemap", newScene);
                  skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
                  skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
                  skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
                  skybox.material = skyboxMaterial;
              var camera = newScene.activeCamera;
                    // camera.position.z = 5;

                    canvas.addEventListener("click", function(){
                        var pickResult = newScene.pick(newScene.pointerX, newScene.pointerY);
                        console.log('mesh name: ' + pickResult.pickedMesh.name);
                        var meshName = pickResult.pickedMesh.name;
                        var index = meshName.indexOf("-");
                        var indexDot = meshName.indexOf(".");
                        var room = meshName.substring(0, index);
                        var item = ''
                        if (indexDot !== -1) {
                          item = meshName.substring(index+1, indexDot);
                        } else {
                          item = meshName.substring(index+1);
                        }
                        if (room !== undefined && item!== undefined) {
                            // $http.get('/api/standards/item?room=' + $routeParams.room + '&item=' + $routeParams.item).success(function(data) {
                            //       console.log("getting item data");
                            //       console.log(data);
                            // });
                            window.location.href = '/gui/#/'+room+'/'+item;
                        }
                        console.log('cameraRotation: ' + camera.rotation);
                        console.log('cameraPosition: ' + camera.position);
                        // console.log('initialCameraInfo: '+ initialCameraRotation.z);
                      });
                    
                      var arrow_keys_handler = function(e) {
                        switch(e.keyCode){
                            case 37: case 39: case 38:  case 40: // Arrow keys
                            e.preventDefault(); break; // Space
                            default: break; // do not block other keys
                          }
                      };
                      canvas.addEventListener("keydown", arrow_keys_handler, false);

                    var updatePosition = function(x,y,z){
                      camera.position.x = x;
                      camera.position.y = y;
                      camera.position.z = z;
                    }

                    var updateRotation = function(x,y,z){
                      camera.rotation.x = x;
                      camera.rotation.y = y;
                      camera.rotation.z = z;
                    }

                    var rotate = function(axis, rotate) {
                      camera.rotation[axis] += rotate;
                    }

                    $('#entranceButton').click(function(){
                      updatePosition(-7, 10, -60);
                      updateRotation(0, 0, 0);
                    })
                    $('#exteriorButton').click(function(){
                      updatePosition(-6, 26, -99)
                      updateRotation (0.4, 0, 0);
                    })

                    $('#diningRoomButton').click(function() {
                      updatePosition(-4, 8, 21);
                      updateRotation(0, 6*Math.PI/5, 0);
                    });
                    $('#restroomButton').click(function() {
                      updatePosition(-8, 8, 39);
                      updateRotation(0,7*Math.PI/5 , 0);
                    });
                    $('#kitchenButton').click(function(){
                      updatePosition(0, 8, -4);
                      updateRotation(0, 3*Math.PI/5, 0)
                    });
                    $('#officeButton').click(function(){
                      updatePosition(5, 8, 1);
                      updateRotation(0.16, .56, 0);
                    });
                    $('#utilityButton').click(function(){
                      updatePosition(4, 8, 28);
                      updateRotation(.25, .38, 0)
                    });
                    $('#storageButton').click(function(){
                      updatePosition(27, 8, 28);
                      updateRotation(0, -Math.PI/8, 0);
                    });

                    var distance;
                    var direction;
                    var degree;
                    var rotationDirection;  
                    var navigate = function(path){
                      for(var i = 0; i < path.length; i++){
                        var start = path[i][0];
                        var destination = path[i][1];
                        var driveSpeed = path[i][2];
                        var rotationSpeed = path[i][3];
                        var initialRotation = path[i][4];
                        var camera = path[i][5];
                        if (start.x === destination.x){
                          distance = Math.abs(destination.y - start.y);
                          if (destination.y > start.y){
                            direction = {x:0, y:1};
                          }
                          else{
                            direction = {x:0, y:-1};
                          }
                        }


                        else if (start.y === destination.y){
                          distance = Math.abs(destination.x - start.x);
                          if (destination.x > start.x){
                            direction = {x:1, y:0};
                          }
                          else{
                            direction = {x:-1, y:0};
                          }
                        }
                        else{
                          console.log("Points for navigation are not orthogonal");
                        }

                        degree = Math.atan2((destination.y-start.y), (destination.x - start.x)) - initialRotation;
                        console.log(degree);
                        if (degree >= 0){
                          rotationDirection = 1;
                        }
                        else{
                          rotationDirection = -1;
                        }
                        console.log(rotationDirection);
                        if (driveSpeed === 0 && rotationSpeed != 0){
                          rotateToGoal(degree, rotationSpeed, camera)
                        }

                        if (rotationSpeed === 0 && driveSpeed != 0){
                          moveToGoal(distance, driveSpeed, direction, camera)
                        }
                      }
                    }
                    var currentRotation = 0;
                    var currentDistance = 0;
                    var moveInterval = -1;
                    var moveToGoal = function(distance, speed, direction, camera){
                      moveInterval = setInterval(function(){move(distance, camera, direction);}, 1000/speed);
                    }

                    var move = function(distance, camera, direction){
                      camera.position.x += 0.1*direction.x;
                      camera.position.z += 0.1*direction.y;
                      currentDistance += (direction.y + direction.x)*0.1;
                      console.log("currentDistance: ", currentDistance);
                      console.log("distance: ", distance);
                      if (Math.abs(currentDistance) >= distance){
                        console.log("here!");
                        clearInterval(moveInterval);
                        // currentDistance = 0;
                        moveInterval = -1;
                      }

                    }

                    var rotateToGoal = function(degree, speed, camera){
                      rotateInterval = setInterval(function(){rotate(degree, camera);}, 1000/speed);
                    }

                    var rotate = function(degree, camera){
                      camera.rotation.y += 0.01*rotationDirection;
                      currentRotation += 0.01*rotationDirection;
                      console.log(currentRotation);
                      if (Math.abs(currentRotation) >= degree){
                        clearInterval(rotateInterval);
                        rotateInterval =-1;
                        currentRotation = 0;
                        
                      }
                    }

					var entrance = {x: -7, y: 7, z: 42};

					var searchCallback = (function(){
						var shortestPathLength = Number.MAX_VALUE;
						var shortestPath = [];
						return {
							reset: function(){
								var shortestPathLength = Number.MAX_VALUE;
								var shortestPath = [];
								return true;
							},
							tryToSetPath: function(path){
								if(path.length && typeof(path) !== "string" && path.length < shortestPathLength)
								{
									shortestPathLength = path.length;
									shortestPath = path;
									return true;
								}
								return false;
							},
							getCurrentPath: function(){
								return shortestPath;
							}
						}
					})();

					var map = (function(){
						var grid = [['_'], ['*']];
						return {
							reset: function() {
								grid = [['_'], ['*']];
							},
							//greater than 0 since you never want to actually be in the walls
							validLocation: function(x, y){
								return x > 0 && y > 0 && x < grid.length - 1 && y < grid[x].length - 1;
							}
						}
					})();

					var search = function(currentX, currentY, endX, endY) {
						if(currentX === endX && currentY === endY) {
							searchCallback.tryToSetPath();
							return;
						}
						else if(!map.validLocation(currentX, currentY)) {
							return;
						}
						else {
							map.setVisited(currentX, currentY);
							search(currentX + 1, currentY, endX, endY);
							search(currentX, currentY + 1, endX, endY);
							search(currentX - 1, currentY, endX, endY);
							search(currentX, currentY - 1, endX, endY);
						}
					}

                    $('#testMovementButton').click(function(){
                      navigate([[{x:-7, y:-42}, {x:-7, y:-30}, 50, 0, Math.PI/2, camera],
                              [{x:-7, y:-30}, {x:-5, y:-30}, 50, 0, Math.PI/2, camera]
                        ]);
                      // navigate({x:-7, y:-30}, {x:-5, y:-30}, 50, 0, Math.PI/2, camera);
                      // navigateHere([[-7, -42, -5, -42, 50, 0, Math.PI/2, camera],
                      //             [-7, -30, -5, -30, 50, 0, Math.PI/2, camera]
                      // ]);
          
                    });


                    var navigateHere = function(c){
                      for(var i = 0; i < c.length; i++){
                        navigate({x:c[i][0], y:c[i][1]}, {x:c[i][2], y:c[i][3]}, c[i][4], c[i][5], c[i][6], c[i][7]);
                      }
                    } 

                    // bfs(testStart, testEnd, DemoRestaurant);
                    
                    // Once the scene is loaded, just register a render loop to render it
                    engine.runRenderLoop(function() {
                        newScene.render();
                    });
                    window.addEventListener("resize", function(){
                     engine.resize();
                    });  
                });
            });
          }
    </script>
<!--         <script>
      var canvas = document.getElementById("renderCanvas");
      var engine = new BABYLON.Engine(canvas, true);
      var scene = new BABYLON.Scene(engine);
      var camera = new BABYLON.ArcRotateCamera("Camera", Math.PI * 1.2, (Math.PI/2)*.8,20, new BABYLON.Vector3(-5, 10, -5), scene);
      var light0 = new BABYLON.PointLight("Omni", new BABYLON.Vector3(-10, 10, -10), scene);
      scene.activeCamera.attachControl(canvas);
                                  var skybox = BABYLON.Mesh.CreateBox("skyBox", 1000.0, scene);
                        var skyboxMaterial = new BABYLON.StandardMaterial("skyBox", scene);
                        skyboxMaterial.backFaceCulling = false;
                        skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture("../babylon/sky16/sky16", scene);
                        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
                        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
                        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
                        skybox.material = skyboxMaterial;
      var click = 0;
      var stovePic = new Image();
      window.addEventListener("click", function(){
        var stoveDiv = document.getElementById('stovePic');
        var pickResult = scene.pick(scene.pointerX, scene.pointerY);
        
        if (pickResult.pickedMesh.name === "Box"){
          stovePic.src = pickResult.pickedMesh.id;
          if(!(click % 2) || (click === 0)){
            stoveDiv.appendChild(stovePic);
          }
          else{
            
            stoveDiv.removeChild(stovePic);
          }
          click += 1;
        }
      });


      var box = BABYLON.Mesh.CreateBox("Box", 3, scene);
      box.position.y = 1.5;

      box.id = "http://www.appliancist.com/ge-range-jb850.jpg";
      
      engine.runRenderLoop(function() {
        scene.render();
      });

      window.addEventListener("resize", function(){
        engine.resize();
      })
      </script> 

  </body>
</html>